from utils import randcell2
# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ randcell2 –∏–∑ –º–æ–¥—É–ª—è utils

from utils import randcell
# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ randcell –∏–∑ –º–æ–¥—É–ª—è utils

from utils import randbool
# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ randbool –∏–∑ –º–æ–¥—É–ª—è utils

# üå≥ üöÅ üåä üî• üè• ‚ù§Ô∏è ‚ö° üèÜ ‚òÅÔ∏è üß∫ üè¨ üîµ üü°

from map import Map
# –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ Map –∏–∑ –º–æ–¥—É–ª—è map

from clouds import Clouds

# –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ Clouds –∏–∑ –º–æ–¥—É–ª—è clouds

from pynput import keyboard
# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è keyboard –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

import time
# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è time –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–¥–µ—Ä–∂–∫–∏

import os
# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è os –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏

import json

from helicopter import Helicopter as Helico
# –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ Helicopter –∏–∑ –º–æ–¥—É–ª—è helicopter


TICK_SLEEP = 0.3
# –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º —Ç–∞–∫—Ç–æ–º

TREE_UPDATE = 40
# –ß–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤

CLOUDS_UPDATE = 8
# –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –æ–±–ª–∞–∫–æ–≤

FIRE_UPDATE = 20
# –ß–∞—Å—Ç–æ—Ç–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ–≥–Ω—è

MAP_W, MAP_H = 20, 10
# –®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç—ã

field = Map(MAP_W, MAP_H)
# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Map

clouds = Clouds(MAP_W, MAP_H)
# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Clouds

helico = Helico(MAP_W, MAP_H)
# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Helicopter

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

tick = 1

MOVES = {'w': (-1, 0), 'd': (0, 1), 's': (1, 0), 'a': (0, -1)}


# –°–ª–æ–≤–∞—Ä—å, —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –∫–ª–∞–≤–∏—à–∏ WASD –∫–æ—Ä—Ç–µ–∂–∞–º dx, dy

def process_key(key):
    c = key.char.lower()
    if c in MOVES.keys():
        dx, dy = MOVES[c][0], MOVES[c][1]
        helico.move(dx, dy)
    if c == 'f':
        data = {"helicopter": helico.export_data(), "clouds": clouds.export_data(), "field": field.export_data()}
        with open("level.json", "w") as lvl:
             json.dump(data, lvl)    


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è
listener = keyboard.Listener(
    on_press=None,
    on_release=process_key, )
listener.start()


# –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, –µ—Å–ª–∏ windows —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cls, –µ—Å–ª–∏ linux —Ç–æ clear
os.system("cls" if os.name == "nt" else "clear")

while True:
    # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∞–∫—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, –µ—Å–ª–∏ windows —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cls, –µ—Å–ª–∏ linux —Ç–æ clear
    os.system("cls" if os.name == "nt" else "clear")

    print("TICK", tick)
    field.process_helicopter(helico, clouds)
    helico.print_stats()
    field.print_map(helico, clouds)
    tick += 1
    time.sleep(TICK_SLEEP)
    if (tick % TREE_UPDATE == 0):
        field.generate_tree()
    if (tick % FIRE_UPDATE == 0):
        field.update_fire()
    if (tick % CLOUDS_UPDATE == 0):
        clouds.update()


# –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª:
# - –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏
# - –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–∫—Ç–∞
# - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞ –Ω–∞ –ø–æ–ª–µ
# - –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞
# - –í—ã–≤–æ–¥ –∫–∞—Ä—Ç—ã
# - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–∞–∫—Ç–∞
# - –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
# - –ü–æ –∂–µ–ª–∞–Ω–∏—é: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ–≥–Ω—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞–∫–æ–≤
